import tensorflow as tf
import input_data
mnist = input_data.read_data_sets('MNIST_data/', one_hot=True)
#print("训练集大小为：%d" % (mnist.train.num_examples))
#print("训练集大小为：%d" % (mnist.test.num_examples))

# 设置等待输入的节点 float，大小[None,784]
x = tf.placeholder("float",[None,784])
#  权重
w = tf.Variable(tf.zeros([784,10]))
# 偏置
b = tf.Variable(tf.zeros([10]))
# 激活函数
y = tf.nn.softmax(tf.matmul(x,w) +b)
# 二维张量 代表图片类别
y_ = tf.placeholder("float",[None,10])
# 交叉熵
cross_entropy = -tf.reduce_sum(y_ * tf.log(y))
# 梯度下降法
train_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)
# 初始化变量
init = tf.global_variables_initializer()
sess = tf.Session()  
sess.run(init)
# 训练
for i in range(3000):
    batch_xs,batch_ys = mnist.train.next_batch(100)
    feed_dict = {x: batch_xs, y_: batch_ys}
    sess.run(train_step, feed_dict)
# 评估训练精度
correct_prediction = tf.equal(tf.argmax(y,1),tf.argmax(y_,1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction,"float"))
# 计算测试集的正确率
print(sess.run(accuracy,feed_dict={x: mnist.test.images,y_: mnist.test.labels}))
